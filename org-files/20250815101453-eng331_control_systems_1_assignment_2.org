:PROPERTIES:
:ID:       96e084e6-aded-49b7-9522-3bdd9dd97344
:END:
#+title: ENG331 - Control Systems 1 - Assignment 2
#+date: [2025-08-15 Fri 10:14]
#+AUTHOR: Baley Eccles - 652137
#+STARTUP: latexpreview
#+FILETAGS: :Assignment:UTAS:2025:
#+STARTUP: latexpreview
#+LATEX_HEADER: \usepackage[a4paper, margin=2cm]{geometry}
#+LATEX_HEADER_EXTRA: \usepackage{minted}
#+LATEX_HEADER_EXTRA: \usepackage{fontspec}
#+LATEX_HEADER_EXTRA: \setmonofont{Iosevka}
#+LATEX_HEADER_EXTRA: \setminted{fontsize=\small, frame=single, breaklines=true}
#+LATEX_HEADER_EXTRA: \usemintedstyle{emacs}
#+LATEX_HEADER_EXTRA: \usepackage{float}
#+LATEX_HEADER_EXTRA: \setlength{\parindent}{0pt}
#+LATEX_HEADER_EXTRA: \setlength{\parskip}{0.25em}

\newpage
* Question 1
** a
\begin{align*}
f(t) &= \frac{d^2i_L(t)}{dt^2} + \frac{1}{RC}\frac{di_L(t)}{dt} + \frac{1}{LC}i_L(t) \\
\mathcal{L}\{\hdots\} &: F(s) = s^2I_L(s) + \frac{1}{RC}sI_L(t) + \frac{1}{LC}I_L(s) \\
F(s) &= I_L(s)\left(s^2 + \frac{1}{RC}s + \frac{1}{LC}\right) \\
\frac{I_L(s)}{F(s)} &= \frac{1}{s^2 + \frac{1}{RC}s + \frac{1}{LC}}
\end{align*}
** b
From the second order prototype form:
\[G(s) = \frac{K\omega_n^2}{s^2 + 2\zeta \omega_ns + \omega_n^2}\]
We can get the system of equations:

\[\begin{cases}
K\omega_n^2 &= 1 \\
2\zeta \omega_n &= \frac{1}{RC} \\
\omega_n^2 &= \frac{1}{LC}
\end{cases}\]

Which means:
\begin{align*}
K &= LC \\
\omega_n &= \frac{1}{\sqrt{LC}} \\
\zeta &= \frac{\sqrt{L}}{2R\sqrt{C}} \\
\end{align*}
** c
Using the following equations:
\begin{align*}
\%OS &= e^{-\zeta\pi/\sqrt{1 - \zeta^2}}\\
T_s &\approx \frac{4}{\zeta \omega_n} \\
\end{align*}

A system of equations can be formed:

\[\begin{cases}
0.1 &= e^{-\frac{\sqrt{L}}{2R\sqrt{0.1}}\pi/\sqrt{1 - \left(\frac{\sqrt{L}}{2R\sqrt{0.1}}\right)^2}}\\
5 &\approx \frac{4}{\frac{\sqrt{L}}{2R\sqrt{0.1}} \frac{1}{\sqrt{0.1L}}} \\
\end{cases}\]

Solving using a calculator:
\begin{align*}
R &= 6.25\Omega \\
L &= 5.46H
\end{align*}

* Question 2
** a
First we must get the transfer function:
\begin{align*}
10r(t) &= 8\frac{d^2c(t)}{dt^2} + 2\frac{dc(t)}{dt} + 40c(t) \\
\mathcal{L}\{\hdots\} &: 10R(s) = 8s^2C(s) + 2sC(t) + 40C(s) \\
10R(s) &= C(s)\left(8s^2 + 2s + 40\right) \\
\frac{C(s)}{R(s)} &= G(s) = \frac{10}{8s^2 + 2s + 40}
\end{align*}

Next we can apply a step response ($U(s) = \frac{1}{s}$) to the system
\[\frac{1}{s}G(s) &= \frac{1}{s}\frac{10}{8s^2 + 2s + 40}\]

Using MATLAB to do the inverse Laplace transform, because it would be nasty otherwise:
#+BEGIN_SRC octave :exports code :results output :session Des1
clc
clear
close all

if exist('OCTAVE_VERSION', 'builtin') % If youre using octave instead of matlab
  set(0, "DefaultLineLineWidth", 2);
  set(0, "DefaultAxesFontSize", 25);
  pkg load symbolic
end

syms s
G = (1/s)*(10/(8*s^2 + 2*s + 40))
latex(ilaplace(G))
#+END_SRC

#+RESULTS:
: G = (sym)
: 
:           10         
:   ───────────────────
:     ⎛   2           ⎞
:   s⋅⎝8⋅s  + 2⋅s + 40⎠
: \frac{1}{4} - \frac{\sqrt{319} e^{- \frac{t}{8}} \sin{\left(\frac{\sqrt{319} t}{8} \right)}}{1276} - \frac{e^{- \frac{t}{8}} \cos{\left(\frac{\sqrt{319} t}{8} \right)}}{4}

Which gives:
\[c(t) = \frac{1}{4}u(t) - \frac{\sqrt{319} e^{- \frac{t}{8}} \sin{\left(\frac{\sqrt{319} t}{8}u(t) \right)}}{1276} - \frac{e^{- \frac{t}{8}} \cos{\left(\frac{\sqrt{319} t}{8} \right)}}{4}u(t)\]


** b
The forced response is:
\[\frac{1}{4}u(t)\]
** c
The natural/transient response is:
\[-\frac{\sqrt{319} e^{- \frac{t}{8}} \sin{\left(\frac{\sqrt{319} t}{8}u(t) \right)}}{1276} - \frac{e^{- \frac{t}{8}} \cos{\left(\frac{\sqrt{319} t}{8} \right)}}{4}u(t)\]
** d
\[G(s) &= \frac{10}{8s^2 + 2s + 40}\]

Code to produce the plot in Figure \ref{fig:ENG331_Q2_d}:
#+BEGIN_SRC octave :exports code :results output :session Q2_d
clc
clear
close all

if exist('OCTAVE_VERSION', 'builtin') % If youre using octave instead of matlab
  set(0, "DefaultLineLineWidth", 2);
  set(0, "DefaultAxesFontSize", 25);
  pkg load symbolic
end

syms s
poles = eval(solve(8*s^2 + 2*s + 40 == 0, s))

hold on;
plot(real(poles(1)), imag(poles(1)), 'bx');
plot(real(poles(2)), imag(poles(2)), 'bx');
axis([-3 3 -3 3]);
axis equal;
grid on;
set (gca, "xaxislocation", "origin");
set (gca, "yaxislocation", "origin");
xlabel('Re(s)');
ylabel('Im(s)');
%print -dpng 'ENG331_Q2_d.png'
#+END_SRC

#+RESULTS:
: poles =
: 
:   -0.1250 - 2.2326i
:   -0.1250 + 2.2326i

#+ATTR_LATEX: :placement [H]
#+CAPTION: Pole-zero plot of the sytem $G(s)$ \label{fig:ENG331_Q2_d}
[[./ENG331_Q2_d.png]]

The poles are at $-0.1250 - 2.2326i$ and $-0.1250 + 2.2326i$.

To find the other stuff we must convert the system into the second order prototype form:
\begin{align*}
G(s) &= \frac{K\omega_n^2}{s^2 + 2\zeta \omega_ns + \omega_n^2} \\
G(s) &= \frac{\frac{10}{8}}{s^2 + \frac{2}{8}s + \frac{40}{8}} \\
G(s) &= \frac{1.25}{s^2 + 0.25s + 5}
\end{align*}

This allows us to create the system of equations:
\begin{cases}
K\omega_n^2 &= 1.25 \\
2\zeta\omega_n &= 0.25 \\
\omega_n^2 &= 5
\end{cases}
#+BEGIN_SRC octave :exports none :results output :session Q2_d_2
clc
clear
close all

omega_n = sqrt(5)
zeta = 0.25/2/omega_n

omega_d = omega_n*sqrt(1 - zeta^2)
sigma_d = 0.1250
theta = acos(zeta)
K = 1.25/(omega_n^2)

#+END_SRC

#+RESULTS:
: omega_n = 2.2361
: zeta = 0.055902
: omega_d = 2.2326
: sigma_d = 0.1250
: theta = 1.5149
: K = 0.2500

Which means, $\omega_n = \sqrt{5} \approx 2.236\ rad/s$, $\zeta = 0.0559$ and $K = 0.25$. Next we can calculate $\omega_d$, $\sigma_d$ and $\theta$.
\[\omega_d = \omega_n\sqrt{1 - \zeta^2} = 2.23\]
\[\sigma_d = - \Re\{\textrm{root}\} = 0.1250\]
\[\theta = \cos^{-1}(\zeta) = \cos^{-1}(0.025) = 1.546\]
** e
As $\zeta < 1$ the system is underdamped.

** f
We can use the final value theorem:
\begin{align*}
c(t \rightarrow \infty) &= \lim_{s\rightarrow 0} sC(s) \\
c(t \rightarrow \infty) &= \lim_{s\rightarrow 0} \frac{1}{s}\frac{1.25s}{s^2 + 0.25s + 5} \\
c(t \rightarrow \infty) &= 0.25
\end{align*}

** g
The DC gain is:
\begin{align*}
\lim_{s\rightarrow 0} G(s) &= \frac{1.25}{s^2 + 0.25s + 5} \\
\lim_{s\rightarrow 0} G(s) &= 0.25
\end{align*}

** h
#+BEGIN_SRC octave :exports none :results output :session Q2_d_2
OS = exp(-zeta*pi/sqrt(1 - zeta^2))*100
T_p = pi/omega_d
T_s = 4/(zeta*omega_n)
#+END_SRC

#+RESULTS:
: OS = 83.871
: T_p = 1.4072
: T_s = 32

\begin{align*}
\%OS &= e^{-\zeta\pi/\sqrt{1 - \zeta^2}} \\
\%OS &= e^{-0.0559\pi/\sqrt{1 - 0.0559^2}} \\
\%OS &= 83.871%
\end{align*}

\begin{align*}
T_p &= \frac{\pi}{\omega_d} \\
T_p &= \frac{\pi}{2.23} \\
T_p &= 1.408\ s
\end{align*}

\begin{align*}
T_s &\approx \frac{4}{\zeta \omega_n} \\
T_s &\approx \frac{4}{0.0559\cdot 2.236} \\
T_s &\approx 32\ s
\end{align*}

We need to use a table for the rise time, which can be seen in Figure \ref{fig:Rise_Time_Table}.
#+ATTR_LATEX: :placement [H] :width 0.25\textwidth
#+CAPTION: Rise time table \label{fig:Rise_Time_Table}
[[./Rise_Time_Table.png]]

\begin{align*}
T_{r,\textrm{normalised}} &\approx 1 \\
T_r &= \frac{T_{r,\textrm{normalised}}}{\omega_n} \\
T_r &= \frac{1.05}{2.236} \\
T_r &= 0.445s
\end{align*}

* Question 3

** a
Just move the $1$ to the second spot:
\[\mathbf{y} = \begin{bmatrix}0 & 1 & 0 & 0 & 0 & 0\end{bmatrix} \mathbf{x} + 0 \mathbf{u}\]

** b
We need to use the following equation:
\[T(s) = \frac{Y(s)}{U(s)} = C(sI - A)^{-1}B + D\]
Using MATLAB to do the matrix inverse and multiplications, as seen below:
#+BEGIN_SRC matlab :exports code :results output
clc
clear
close all

if exist('OCTAVE_VERSION', 'builtin') % If youre using octave instead of matlab
    set(0, "DefaultLineLineWidth", 2);
    set(0, "DefaultAxesFontSize", 25);
    pkg load symbolic
end

M_1 = 2;
M_2 = 1;
M_3 = 1;

f_v1 = 1;
f_v2 = 1;
f_v3 = 1;
f_v4 = 1;
f_v5 = 1;

K = 2;

A = [
    0, 1, 0, 0, 0, 0; ...
    -K/M_1, -(f_v1 + f_v2 + f_v4)/M_2, K/M_1, f_v2/M_1, 0, f_v4/M_1; ...
    0, 0, 0, 1, 0, 0; ...
    K/M_2, f_v2/M_2, -K/M_2, -(f_v2 + f_v5)/M_2, 0, f_v5/M_2; ...
    0, 0, 0, 0, 0, 1; ...
    0, f_v4/M_3, 0, f_v5/M_3, 0, -(f_v3 + f_v4 + f_v5)/M_3
    ];
B = [0; 0; 0; 1/M_2; 0; 0];
C = [0, 1, 0, 0, 0, 0];
D = [0];

syms s
G = C*inv(s*eye(6) - A)*B + D;
disp(G)
#+END_SRC

#+RESULTS:
: (s^2 + 6*s + 6)/(2*s^4 + 16*s^3 + 44*s^2 + 53*s + 28)

Which gives:
\[G(s) = \frac{s^2 + 6s + 6}{2s^4 + 16s^3 + 44s^2 + 53s + 28}\]
** c
*** i
We can use the peak time and point to find the required values using the following equations:
\begin{align*}
T_p &= \frac{\pi}{\omega_d} \\
\omega_d &= \omega_n\sqrt{1 - \zeta^2} \\
\textrm{Peak Value} &= \frac{K}{\sqrt{1-\zeta^2}} \\
G(s) &= \frac{K\omega_n^2}{s^2 + 2\zeta \omega_ns + \omega_n^2}
\end{align*}

Using $K = 0.01153$, $y_p = 0.012572$ and $T_p = 1.6$ we get the following system of equations:

\[\begin{cases}
\omega_d &= \frac{\pi}{1.6} \\
\omega_d &= \omega_n\sqrt{1 - \zeta^2} \\
y_p &= \frac{0.01153}{\sqrt{1 - \zeta^2}}
\end{cases}\]

Which gives $\omega_n = 2.1409$ and $\zeta = 0.3986$ and the following transfer function in prototype form:
\[H_i(s) = \frac{0.05285}{s^2 + 1.707 s + 4.584}\]

#+BEGIN_SRC matlab :exports none :results output
clc
clear
close all

T_p = 1.6;
peak = 0.012572;
K = 0.01153;

w_d = pi/T_p;

syms z w_n
eq1 = w_d == w_n*sqrt(1 - z^2);
eq2 = peak == K/sqrt(1 - z^2);
[w, zeta] = solve(eq1, eq2);
disp(vpa(w))
disp(vpa(zeta))

H = tf([K*double(w(1))^2], [1, 2*double(zeta(2))*double(w(1)), double(w(1))^2])
disp(H)
step(H)
#+END_SRC

#+RESULTS:
#+begin_example
2.1409422615422203001561078977754
2.1409422615422203001561078977754
-0.39861719447464261667203783290458
 0.39861719447464261667203783290458

H =
 
         0.05285
  ---------------------
  s^2 + 1.707 s + 4.584
 
Continuous-time transfer function.
  tf with properties:

       Numerator: {[0 0 0.0528]}
     Denominator: {[1 1.7068 4.5836]}
        Variable: 's'
         IODelay: 0
      InputDelay: 0
     OutputDelay: 0
       InputName: {''}
       InputUnit: {''}
      InputGroup: [1x1 struct]
      OutputName: {''}
      OutputUnit: {''}
     OutputGroup: [1x1 struct]
           Notes: [0x1 string]
        UserData: []
            Name: ''
              Ts: 0
        TimeUnit: 'seconds'
    SamplingGrid: [1x1 struct]
step(H) %-<org-eval>-
#+end_example


*** ii

From the figure.
\[\textrm{DC Gain} = K = 0.01153\]
The damped natural frequency ($\omega_d$) can be calculated using the time between peaks ($T$):
\[\omega_d = 2\pi f = \frac{2\pi}{T} = \frac{2\pi}{3.7 - 1.6} = 2.991\]

We can find the decay rate using the two peaks, at $(1.6, 0.012572)$ and $(3.7, 0.01225)$ and the following relationship:
\[\textrm{Decay Rate} = -\zeta\omega_n\]
The decay rate is given by:
\[\lambda = \frac{\ln(y_1)t_2 - \ln(y_2)t_1}{t_1\cdot t_2} = -1.5454\]

Same as before, we can create another system of equations to solve:

\[\begin{cases}
-1.5454 &= -\zeta\omega_n \\
2.991 &= \omega_n\sqrt{1 - \zeta^2}
\end{cases}\]

Which gives $\omega_n = 3.367$ and $\zeta = 0.459$ and the second order system in prototype form:
\[H_{ii}(s) = \frac{0.1307}{s^2 + 3.091 s + 11.33}\]

#+BEGIN_SRC matlab :exports none :results output
clc
clear
close all

K = 0.01153;

p1_t = 1.6;
p1_y = 0.012572;
p2_t = 3.7;
p2_y = 0.01225;

w_d = 2*pi/(p2_t - p1_t);

l = (log(p1_y)*p2_t - log(p2_y)*p1_t)/(p1_t*p2_t);

syms w_n z
eq1 = -1.5454 == -w_n*z;
eq2 = 2.991 == w_n*sqrt(1 - z^2);

[w, zeta] = solve(eq1, eq2);

H = tf([K*double(w)^2], [1, 2*double(zeta)*double(w), double(w)^2])
step(H)
#+END_SRC

#+RESULTS:
: H =
:  
:          0.1307
:   ---------------------
:   s^2 + 3.091 s + 11.33
:  
: Continuous-time transfer function.
: step(H) %-<org-eval>-

** d
We can use the following code to produce the plot in Figure \ref{fig:ENG331_A2_Q3_d}.

#+BEGIN_SRC matlab :exports code :results output
clc;
clear;
close all;

% Assuming that the name of the data is "ENG331_A2_Q3.mat"
data = load("ENG331_A2_Q3.mat");
t = data.t;
y = data.y;
disp(data);

figure;
hold on;
plot(t, y);

H_i  = tf([0 0 0.0528], [1 1.7068 4.5836]);
H_ii = tf([0 0 0.1307], [1 3.0908 11.3343]);

step(H_i, 'r');
step(H_ii, 'k');
legend('H', 'H_i', 'H_{ii}');
hold off;
#+END_SRC

#+RESULTS:
: t: [1201x1 double]
:     y: [1201x1 double]
: hold off; %-<org-eval>-


#+ATTR_LATEX: :placement [H]
#+CAPTION: Equivalent second order systems and full system \label{fig:ENG331_A2_Q3_d}
[[./ENG331_A2_Q3_d.png]]

** e
Looking at Figure \ref{fig:ENG331_A2_Q3_d} we can notice a few things.
1. $H_i$ has more accurate peak time than $H_{ii}$.
   
   This is because of the method that we used to find the approximate system used the peak time, whereas with $H_{ii}$ we didn't.
   
2. Neither of step responses closely match the higher order response

   This must be because the poles are too close to one another, or the zeroes are doing weird things.
   
3. The decay rate of $H_i$ and $H_{ii}$ is much faster than $H$

   This implies the damping ratio is not quite correct on the two second order approximations, this makes sense because we did not explicitly calculate it.
   
4. $H$ appears to undershoot more than it overshoots the settling position.

   The possible cause of this is the higher order damping has more complicated effects. This is not possible with the second order systems, as there is only one damping ratio present, this dictates how fasts it decays.

5. The natural of $H_i$ does not match the frequency of $H$ perfectly

   $H_i$ appears to have a smaller natural frequency than $H$. Whereas the frequency of $H_{ii}$ appears to match the frequency of $H$ well, however it has a small phase shift.
   

#+BEGIN_SRC matlab :exports none :results output
clc;
clear;
close all;
#+END_SRC
