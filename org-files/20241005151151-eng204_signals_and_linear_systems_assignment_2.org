:PROPERTIES:
:ID:       7d1bb30c-084d-4895-9100-22b39a5c4f8c
:END:
#+title: ENG204 - Signals and Linear Systems - Assignment 2
#+date: [2024-10-05 Sat 15:11]
#+AUTHOR: Baley Eccles - 652137
#+FILETAGS: :Assignment:TODO:
#+STARTUP: latexpreview
#+LATEX_HEADER: \usepackage[a4paper, margin=2.5cm]{geometry}
#+LATEX_HEADER_EXTRA: \usepackage{minted}
#+LATEX_HEADER_EXTRA: \usepackage{fontspec}
#+LATEX_HEADER_EXTRA: \setmonofont{Iosevka}
#+LATEX_HEADER_EXTRA: \setminted{fontsize=\small, frame=single, breaklines=true}
#+LATEX_HEADER_EXTRA: \usemintedstyle{emacs}
#+LATEX_HEADER_EXTRA: \usepackage[backend=biber,style=apa]{biblatex}
#+LATEX_HEADER_EXTRA: \addbibresource{citation.bib}
#+LATEX_HEADER_EXTRA: \usepackage{float}

* ENG204 - Signals and Linear Systems - Assignment 2
** 1. Frequency Domain Analysis of an Audio Signal
#+BEGIN_SRC octave :exports none :results output :session Q1
clc
clear
close all
Signal = load('/home/Baley/UTAS/ENG204 - Signals And Linear Systems/Assignment 2.1/audio_signal_1.mat');
fourierCoeffs = Signal.fourierSeriesCoeffs;

% Convert to magnitude and phase
SignalMag = abs(fourierCoeffs);
SignalPhase = angle(fourierCoeffs);

SampleFreq = 44100;
N = length(fourierCoeffs);
f = (0:N-1)*(SampleFreq/N);

% Plot Magnitude vs Frequency
figure;
plot(f, SignalMag, 'b', 'LineWidth', 1.5);
title('Magnitude of Fourier Transform');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
grid on;
legend('Magnitude');
xlim([SampleFreq/2, SampleFreq]);

% Plot Phase vs Frequency
figure;
plot(f, SignalPhase, 'r', 'LineWidth', 1.5);
title('Phase of Fourier Transform');
xlabel('Frequency (Hz)');
ylabel('Phase (radians)');
grid on;
legend('Phase');
xlim([SampleFreq/2, SampleFreq]);
#+END_SRC

#+RESULTS:


#+BEGIN_SRC octave :exports code :results output :session Q1
clc;
clear;
close all;

% Load the data
Signal = load('/home/Baley/UTAS/ENG204 - Signals And Linear Systems/Assignment 2.1/audio_signal_1.mat');
Signal = Signal.fourierSeriesCoeffs;

Fs = 44100;
N = length(Signal);
f = (-N/2:N/2-1)*(Fs/N);

% Original Audio
audiowrite('audio.wav', ifft(Signal), Fs);


magnitude = abs(fftshift(Signal));
phase = angle(fftshift(Signal));

% Plot magnitude and phase spectrum
figure;
subplot(2,1,1);
plot(f, magnitude);
title('Magnitude Spectrum');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
xlim([-Fs/2 Fs/2]);

subplot(2,1,2);
plot(f, phase);
title('Phase Spectrum');
xlabel('Frequency (Hz)');
ylabel('Phase (radians)');
xlim([-Fs/2 Fs/2]);


n = 50000;
[magnitudeSorted, idx] = sort(magnitude, 'descend');
idx = idx(1:n);
output = zeros(size(Signal));
for i = 1:n
  output(idx(i)) = Signal(idx(i));
end

audiowrite('synthesized_audio.wav', ifft(output), Fs);

magnitude = abs(fftshift(output));
phase = angle(fftshift(output));

% Plot magnitude and phase spectrum
figure;
subplot(2,1,1);
plot(f, magnitude);
title('Magnitude Spectrum');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
xlim([-Fs/2 Fs/2]);

subplot(2,1,2);
plot(f, phase);
title('Phase Spectrum');
xlabel('Frequency (Hz)');
ylabel('Phase (radians)');
xlim([-Fs/2 Fs/2]);
#+END_SRC

#+RESULTS:
** 2. Ideal Filtering

#+BEGIN_SRC octave :exports code :results output :session Q1
clc
clear
close all

f1 = 250;
f2 = 750;
Td = 2;
Fs = 3200;
N = Td*Fs;
n = 0:(N-1);
wd1 = 2*pi*f1/Fs;
wd2 = 2*pi*f2/Fs;
Phi = ((wd2-wd1)/(2*(N-1)))*n.^2+wd1*n;
Chirp = cos(Phi);
audiowrite('chirp.wav', Chirp, Fs);

magnitude = abs(fftshift(fft(Chirp)));
f = (-N/2:N/2-1)*(Fs/N);
figure;
plot(f, magnitude);
title('Magnitude Spectrum');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
grid on;

Noise = load('/home/Baley/UTAS/ENG204 - Signals And Linear Systems/Assignment 2.1/noise.mat');
Noise = Noise.noise;

audiowrite('noise.wav', Noise, 3200);

magnitude = abs(fftshift(fft(Noise)));
f = (-N/2:N/2-1)*(Fs/N);
figure;
plot(f, magnitude);
title('Magnitude Spectrum');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
grid on;

chirp_and_noise = Chirp + Noise;
audiowrite('chirp_and_noise.wav', chirp_and_noise, 3200);


magnitude = abs(fftshift(fft(chirp_and_noise)));
f = (-N/2:N/2-1)*(Fs/N);
figure;
plot(f, magnitude);
title('Magnitude Spectrum');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
grid on;


t = 0:length(chirp_and_noise):2;
figure;
plot(t, chirp_and_noise);
title('Magnitude Spectrum');
xlabel('Time (Hz)');
ylabel('Magnitude');
grid on;


#+END_SRC

#+RESULTS:


:TODO:
From these plots we can see that there is noise at 1000Hz
