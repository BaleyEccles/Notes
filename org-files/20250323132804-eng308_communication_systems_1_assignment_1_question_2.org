:PROPERTIES:
:ID:       358ec344-ce1e-4d60-be9f-b0b6529d4649
:END:
#+title: ENG308 - Communication Systems 1 - Assignment 1 - Question 2
#+date: [2025-03-23 Sun 13:28]
#+AUTHOR: Baley Eccles - 652137
#+FILETAGS: :Assignment:UTAS:2025:
#+STARTUP: latexpreview
#+LATEX_HEADER: \usepackage[a4paper, margin=2cm]{geometry}
#+LATEX_HEADER_EXTRA: \usepackage{minted}
#+LATEX_HEADER_EXTRA: \usepackage{fontspec}
#+LATEX_HEADER_EXTRA: \setmonofont{Iosevka}
#+LATEX_HEADER_EXTRA: \setminted{fontsize=\small, frame=single, breaklines=true}
#+LATEX_HEADER_EXTRA: \usemintedstyle{emacs}
#+LATEX_HEADER: \usepackage[style=apa, backend=biber]{biblatex}
#+LATEX_HEADER: \addbibresource{ENG307-Ass2-Ref.bib}
#+LATEX_HEADER: \DeclareLanguageMapping{english}{english-apa}
#+LATEX_HEADER_EXTRA: \usepackage{float}

* Part a
If we integrate the message signal and then do phase modulation on it we will get the frequency modulated signal. Likewise, if we differentiate the message and then do frequency modulation on it we will get the phase modulated signal
Where:
\[u_{PM}(t) = A_c\cos(2\pi f_ct + k_pm(t))\]
\[u_{FM}(t) = A_c\cos(2\pi f_ct + 2\pi k_f\int_{-\infty}^tm(\tau)d\tau)\]
taking $k_p = 2\cdotpi\cdot0.0001$ and $k_f = 0.0001$. $k_p$ must be a factor of $2\pi$ larger than $k_f$ to produce the desired results, as in the FM equation there is an extra $2\pi$ on $k_f$.
#+BEGIN_SRC octave :exports none :results output :session ALL 
%% Part A
clear all;
close all;

%% Make compatible with MATLAB and Octave
if exist('OCTAVE_VERSION', 'builtin')
  pkg load signal
  set(0, "DefaultAxesFontSize", 25);
end

%% Parameters
fc = 1000;                    % carrier frequency (Hz)
Fs = 1000 * fc;               % sampling frequency
t = 0 : 1/Fs : 0.075;          % time vector
N = length(t);                % number of samples
f = (-N/2 : N/2-1) * (Fs/N);  % frequency vector
w = 2 * pi;

%% Modulating signal parameters
Ac = 1;
kp = 2*pi*0.0001;
kf = 0.0001;
A1 = 1;
A2 = 20;
A3 = 10;
f1 = 50;
f2 = 100;
f3 = 150;
phi1 = pi/2;
phi2 = pi;
phi3 = pi/3;


#+END_SRC

#+RESULTS:

The following Matlab code can do this. 
#+BEGIN_SRC octave :exports code :results output :session ALL 
m = A1 * cos(w * f1 * t + phi1) + A2 * cos(w * f2 * t + phi2) + A3 * cos(w * f3 * t + phi3);

im = cumtrapz(m);
iu_PM = Ac*cos(2*pi*fc*t + kp*im);
u_FM = Ac*cos(2*pi*fc*t + 2*pi*kf*cumtrapz(m));

dm = diff(m);
du_FM = Ac*cos(2*pi*fc*t(2:end) + 2*pi*kf*cumtrapz(dm(1:end)));
u_PM = Ac*cos(2*pi*fc*t + kp*m);
#+END_SRC

#+BEGIN_SRC octave :exports none :results output :session ALL 
if exist('OCTAVE_VERSION', 'builtin')
  set(0, "DefaultAxesFontSize", 25);
end
figure;
subplot(2,1,1);
plot(t(1:end), iu_PM, 'linewidth', 2)
title('Integral of message signal then phase modulated');
xlabel('Time (s)');
ylabel('Amplitude');
xlim([0, 0.0075]);
subplot(2,1,2);
plot(t(1:end), u_FM, 'linewidth', 2)
title('Frequency modulation of the message signal');
xlabel('Time (s)');
ylabel('Amplitude');
xlim([0, 0.0075]);
print -dpng 'Integral_then_phase_modulated.png'

%% Plot 2
figure;
subplot(2,1,1);
plot(t(2:end), du_FM, 'linewidth', 2)
title('Derivative of message signal then frequency modulated');
xlabel('Time (s)');
ylabel('Amplitude');
xlim([0, 0.075]);
subplot(2,1,2);
plot(t(2:end), u_PM(2:end), 'linewidth', 2)
title('Phase modulation of the message signal');
xlabel('Time (s)');
ylabel('Amplitude');
xlim([0, 0.075]);
print -dpng 'Derivative_then_frequency_modulated.png'
#+END_SRC

#+RESULTS:

[[./Integral_then_phase_modulated.png]]
[[./Derivative_then_frequency_modulated.png]]

The modulation index can be calculated using:
For FM:
\[\beta_f = \frac{k_f A_m}{\max(f_m)}\]
\\
For PM:
\[\beta_p = k_pA_m\]
Which was done using the following Matlab code.
#+BEGIN_SRC octave :exports both :results output :session ALL 
Am = max(abs(m));

bf = kf*Am/max([f1, f2, f3]);
bp = kp*Am;
fprintf("The modulation index for FM is %.6f\n", bf);
fprintf("The modulation index for PM is %.6f\n", bp);
#+END_SRC

#+RESULTS:
: The modulation index for FM is 0.000019
: The modulation index for PM is 0.017820


* Part b
*_NOTE_*: All of code to plot the plots in this part was excluded, as it was just importing the data that was exported from Simulink.\\

The PLL for the following parts can be seen in the following figure:
[[./PLL.png]]

Need to show:
1. There is some small constant phase error in steady-state
2. Changing $K_f$, $A_c$, $K_o$ and $K_{PD}$ can break the locking via the equation below
\[|\omega_c-\omega_f| \leq \frac{\pi}{2} K_fA_cK_oK_{PD}\]
3. Transient analysis

Using the carrier frequency as, $f_c = 200Hz$ and the VCO free running frequency as, $f_f = 200Hz$.
It was chosen that $K_{PD} = 1$, $K_f = 1$ and $K_{vco} = 2\pi\cdot100$.

** 1
using:
\[A_c = 1\]
\[K_f = 1\]
\[K_{PD} = 1\]
\[K_{vco} = 2\pi\cdot100\]
It can be seen, in the following figure, that the PLL takes a small amount of time to lock on to the sine wave. But once it has locked on it maintains a consistent phase difference, relative to the input wave, this is when it is at steady state.
[[./PLL_Const_Phase.png]]

#+BEGIN_SRC octave :exports none :results output :session PLL1 
clear all;
close all;
pkg load io
if exist('OCTAVE_VERSION', 'builtin')
  set(0, "DefaultAxesFontSize", 25);
end
data = xlsread("PLL_Data_5.xlsx");

t = data(:,1);
sin = data(:,4);
vco = data(:,5);

hold on;
plot(t, vco, 'b', 'LineWidth', 1.5);
plot(t, sin, 'r', 'LineWidth', 1.5);

xlabel('time');
ylabel('voltage');
title('constant phase difference in steady state');
xlim([0, 0.04]);
legend('vco', 'input');
hold off;
print -dpng 'PLL_Const_Phase.png'
#+END_SRC

#+RESULTS:

** 2
We can use similar values before, however we can change $K_f$ to a lower value to make the locking range smaller.
\[A_c = 1\]
\[K_f = 0.001\]
\[K_{PD} = 1\]
\[K_PD = 2\pi\cdot100\]
Which means the frequency difference must be:
\begin{align*}
\lvert\omega_c-\omega_f\rvert &\leq \frac{\pi}{2} K_fA_cK_oK_{PD} \\
\lvert\omega_c-\omega_f\rvert &\leq \frac{\pi}{2} 1\cdot0.001\cdot1\cdot2\pi\cdot100 \\
\lvert\omega_c-\omega_f\rvert &\leq 1\ rad/s
\end{align*}
So, if we set a frequency difference of greater than 1 rad/s we will expect the PLL to fail. Setting $f_c = 205Hz$, $5Hz$ larger than $f_f$ we can see that PLL never locks on to the signal.

[[./PLL_No_Lock_On.png]]
As can be seen in the figure above, the PLL is unable to lock onto this frequency. There is no consistent phase difference between the peaks of the input or VCO signals.
#+BEGIN_SRC octave :exports none :results output :session PLL2 
clear all;
close all;
pkg load io
if exist('OCTAVE_VERSION', 'builtin')
  set(0, "DefaultAxesFontSize", 25);
end
data = xlsread("PLL_Data_6.xlsx");

t = data(:,1);
sin = data(:,4);
vco = data(:,5);

hold on;
plot(t, vco, 'b', 'LineWidth', 1.5);
plot(t, sin, 'r', 'LineWidth', 1.5);

xlabel('time');
ylabel('voltage');
title('Breaking PLL Locking');
legend('vco', 'input');
ylim([0.95, 1.05]);
hold off;
print -dpng 'PLL_No_Lock_On.png'
#+END_SRC

#+RESULTS:

** 3
Setting the values back to the ones before:
\[A_c = 1\]
\[K_f = 1\]
\[K_{PD} = 1\]
\[K_{vco} = 2\pi\cdot100\]
Introduce a frequency shift, from $f_c = 200Hz$ to $f_{c} = 150Hz$, at $t = 0.1$. From the notes: "If a frequency error occurs, the phase is tracked with a constant offset", which can be seen. That is, there is a constant phase offset after changing the frequency.
[[./PLL_Freq_Diff.png]]
#+BEGIN_SRC octave :exports none :results output :session PLL3 
clear all;
close all;
pkg load io
if exist('OCTAVE_VERSION', 'builtin')
  set(0, "DefaultAxesFontSize", 25);
end
data = xlsread("PLL_Data_7.xlsx");

t = data(:,1);
sin = data(:,7);
vco = data(:,8);

hold on;
plot(t, vco, 'b', 'LineWidth', 1.5);
plot(t, sin, 'r', 'LineWidth', 1.5);

xlabel('time');
ylabel('voltage');
title('Change in frequency');
legend('vco', 'input');
xlim([0.095, 0.13]);
hold off;
print -dpng 'PLL_Freq_Diff.png'
#+END_SRC

#+RESULTS:


* Part c
At the moment the small angle approximation is not a great approximation. The phase error is too large ($|e(t)| \approx 0.5$), $\sin(0.5) = 0.479$. It is not reasonable to assume that $\sin(x) \approx x$. If we change $K_{PD}$ from $1$ to $0.1$ the approximation becomes much more reasonable. \\

With $K_{PD} = 0.1$ we can apply a phase step to the input of $55^o$ and see the phase error. The phase step was applied at $t = 0.1$, it can be seen that the phase error never goes above $0.1$, which means the approximation is valid.
[[./PLL_Phase_Diff.png]]
#+BEGIN_SRC octave :exports none :results output :session PLL4 
clear all;
close all;
pkg load io
if exist('OCTAVE_VERSION', 'builtin')
  set(0, "DefaultAxesFontSize", 25);
end
data = xlsread("PLL_Data_9.xlsx");

t = data(:,1);
phase = data(:,2);

hold on;
plot(t, phase, 'r', 'LineWidth', 1.5);

xlabel('time');
ylabel('voltage');
title('Change in phase');
xlim([0.095, 0.13]);
hold off;
print -dpng 'PLL_Phase_Diff.png'
#+END_SRC

#+RESULTS:

Even if we apply a frequency step from $200Hz$ to $1kHz$ the approximation still holds. Even though the PLL fails to lock on it is still valid to assume that $\sin(x)\approx x$.
[[./PLL_Large_Freq_Diff.png]]
#+BEGIN_SRC octave :exports none :results output :session PLL4 
clear all;
close all;
pkg load io
if exist('OCTAVE_VERSION', 'builtin')
  set(0, "DefaultAxesFontSize", 25);
end
data = xlsread("PLL_Data_10.xlsx");

t = data(:,1);
phase = data(:,2);

hold on;
plot(t, phase, 'r', 'LineWidth', 1.5);

xlabel('time');
ylabel('voltage');
title('Change in phase');
xlim([0.095, 0.13]);
hold off;
print -dpng 'PLL_Large_Freq_Diff.png'
#+END_SRC

#+RESULTS:

* Part d
If we change the filter from a first order filter to a second order butterworth filter a few things happen. But first we must linearise the system. \\

For small changes in the input and output angle the system can be described as:
\[\frac{\Delta\Theta_o(f)}{\Delta\Theta_i(f)} = H(f) = \frac{A_cK_{PD}K_{vco}G(f)}{j2\pi f+A_cK_{PD}K_{vco}G(f)}\]
Where $G(f)$ is the filter. Substituting in the values we can find:
\[H(f) = \frac{2\pi100 G(f)}{j2\pi f+2\pi100G(f)}\]
The first order filter that was used is:
\[G_1(s) = \frac{1}{1 + \frac{s}{2\pi200}}\]
Using the ~butter~ function in Matlab, the second order butterworth filter is:
\[G_2(s) = \frac{2.112\cdot 10^6}{s^2 + 2058 s + 2.112\cdot10^6}\]
Substituting these into $H(f)$, with $s = j2\pi f$, we can get the two transfer functions:
\[H_1(f) = \frac{20k}{20k - f^2 + j200f}\]
\[H_2(f) = \frac{2\pi100\cdot2.112\cdot10^6}{2\pi100\cdot2.112\cdot10^6-2058\cdot4\pi^2f^2 -j4\pi^2f^3 + j2.112\cdot10^62\pi f}}\]
These were plotted in Matlab:
[[./Bode_H1.png]]
[[./Bode_H2.png]]
#+BEGIN_SRC octave :exports none :results output :session bode1 
clear all;
close all;
pkg load control
pkg load signal
if exist('OCTAVE_VERSION', 'builtin')
  set(0, "DefaultAxesFontSize", 25);
end

f = logspace(0, 5, 2000);

H1 = 20000 ./ (20000 - f.^2 + 1i*200.*f);

magH1_dB   = 20*log10(abs(H1));
phaseH1_deg = angle(H1) * (180/pi);

figure; 
subplot(2,1,1);
semilogx(f, magH1_dB, 'LineWidth', 1.2);
grid on; 
xlabel('Frequency (Hz)');
ylabel('Magnitude (dB)');
title('Bode Plot of H_1(f)');

subplot(2,1,2);
semilogx(f, phaseH1_deg, 'LineWidth', 1.2);
grid on; 
xlabel('Frequency (Hz)');
ylabel('Phase (degrees)');
print -dpng 'Bode_H1.png'

numH2 = (2*pi*100) * 2.112e6; 
denH2 = numH2 ...
        - 2058*(4*pi^2)*(f.^2) ...
        - 1i*(4*pi^2)*(f.^3) ...
        + 1i*(2.112e6).*(2*pi*f);

H2 = numH2 ./ denH2;

magH2_dB    = 20*log10(abs(H2));
phaseH2_deg = angle(H2) * (180/pi);

figure;
subplot(2,1,1);
semilogx(f, magH2_dB, 'LineWidth', 1.2);
grid on;
xlabel('Frequency (Hz)');
ylabel('Magnitude (dB)');
title('Bode Plot of H_2(f)');

subplot(2,1,2);
semilogx(f, phaseH2_deg, 'LineWidth', 1.2);
grid on;
xlabel('Frequency (Hz)');
ylabel('Phase (degrees)');
print -dpng 'Bode_H2.png'

#+END_SRC

#+RESULTS:
When using the first order filter the locking time was about 0.1 seconds, whereas using the second order filter this increased to 0.8 seconds, this is due to the extra pole in the filter. The phase delay of the signal is smaller when using the second order filter, this is probably because the filter is more effectivity able to filter out the high frequencies. Which will lead to better tracking and hence a smaller phase delay.

* Part e
The locking range can be found using:
\begin{align*}
\lvert\omega_c-\omega_f\rvert &\leq \frac{\pi}{2} K_fA_cK_oK_{PD} \\
\lvert\omega_c-\omega_f\rvert &\leq \frac{\pi}{2} 1\cdot1\cdot1\cdot2\pi\cdot100 \\
\lvert\omega_c-\omega_f\rvert &\leq 987\ rad/s = 1550 Hz
\end{align*}

* Part f
The PLL was able to demodulate the FM and PM signals, both did not do a perfect job at demodulating the signals. Due to the design of the PLL there is a very large phase shift for each of the signals, when working with the pure sine wave this shift was not visibly present, because the sine wave repeated much quicker than the two modulated signals.
[[./PLL_FM.png]]
[[./PLL_PM.png]]
#+BEGIN_SRC octave :exports none :results output :session FM_tracking 
clear all;
close all;
pkg load io
if exist('OCTAVE_VERSION', 'builtin')
  set(0, "DefaultAxesFontSize", 25);
end

data = xlsread("PLL_Data_11.xlsx");
t = data(:,1);
sin = data(:,11);
vco = data(:,13);

hold on;
plot(t, vco, 'b', 'LineWidth', 1.5);
plot(t, sin, 'r', 'LineWidth', 1.5);

xlabel('time');
ylabel('voltage');
title('FM demodulated using PLL');
legend('vco', 'input');
xlim([0.05, 0.1])
hold off;
print -dpng 'PLL_FM.png'
#+END_SRC

#+RESULTS:

#+BEGIN_SRC octave :exports none :results output :session PM_tracking 
clear all;
close all;
pkg load io
if exist('OCTAVE_VERSION', 'builtin')
  set(0, "DefaultAxesFontSize", 25);
end

data = xlsread("PLL_Data_12.xlsx");
t = data(:,1);
sin = data(:,14);
vco = data(:,13);

hold on;
plot(t, vco, 'b', 'LineWidth', 1.5);
plot(t, sin, 'r', 'LineWidth', 1.5);

xlabel('time');
ylabel('voltage');
title('PM modulated tracking');
legend('vco', 'input');
xlim([0.1 - 0.06, 0.1])
hold off;
print -dpng 'PLL_PM.png'
#+END_SRC

#+RESULTS:

